use serde::ser::StdError;
use std::result;
use strum_macros::EnumIter;

pub type Result<T> = result::Result<T, Box<dyn StdError + Send + Sync + 'static>>;

pub struct Gpt2Tokenizer {
    tokenizer: tokenizers::Tokenizer,
}

impl Gpt2Tokenizer {
    pub fn new(folder: &str) -> Result<Self> {
        let tokenizer = tokenizers::Tokenizer::from_file(format!("{folder}/tokenizer.json"))?;
        Ok(Self { tokenizer })
    }

    pub fn encode(&self, text: &str) -> Vec<usize> {
        let tokens = self.tokenizer.encode(text, true).unwrap();
        tokens.get_ids().iter().map(|t| *t as usize).collect()
    }

    pub fn special_token(&self, token: SpecialToken) -> Option<usize> {
        self.tokenizer
            .token_to_id(&token.to_string())
            .map(|t| t as usize)
    }

    pub fn decode(&self, tokens: &[usize], skip_special: bool) -> Result<String> {
        self.tokenizer.decode(
            &(tokens.iter().map(|t| *t as u32).collect::<Vec<u32>>()),
            skip_special,
        )
    }

    pub fn is_special(&self, token: usize) -> bool {
        self.tokenizer
            .decode(&[token as u32], true)
            .ok()
            .map(|s| s.is_empty())
            .unwrap_or(false)
    }

    pub fn vocab_size(&self) -> usize {
        self.tokenizer.get_vocab_size(true)
    }
}

#[derive(Debug, Copy, Clone, EnumIter, clap::ValueEnum)]
pub enum Language {
    English,
    Chinese,
    German,
    Spanish,
    Russian,
    Korean,
    French,
    Japanese,
    Portuguese,
    Turkish,
    Polish,
    Catalan,
    Dutch,
    Arabic,
    Swedish,
    Italian,
    Indonesian,
    Hindi,
    Finnish,
    Vietnamese,
    Hebrew,
    Ukrainian,
    Greek,
    Malay,
    Czech,
    Romanian,
    Danish,
    Hungarian,
    Tamil,
    Norwegian,
    Thai,
    Urdu,
    Croatian,
    Bulgarian,
    Lithuanian,
    Latin,
    Maori,
    Malayalam,
    Welsh,
    Slovak,
    Telugu,
    Persian,
    Latvian,
    Bengali,
    Serbian,
    Azerbaijani,
    Slovenian,
    Kannada,
    Estonian,
    Macedonian,
    Breton,
    Basque,
    Icelandic,
    Armenian,
    Nepali,
    Mongolian,
    Bosnian,
    Kazakh,
    Albanian,
    Swahili,
    Galician,
    Marathi,
    Punjabi,
    Sinhala,
    Khmer,
    Shona,
    Yoruba,
    Somali,
    Afrikaans,
    Occitan,
    Georgian,
    Belarusian,
    Tajik,
    Sindhi,
    Gujarati,
    Amharic,
    Yiddish,
    Lao,
    Uzbek,
    Faroese,
    HaitianCreole,
    Pashto,
    Turkmen,
    Nynorsk,
    Maltese,
    Samoan,
    Luxembourgish,
    Burmese,
    Bodo,
    Tagalog,
    Malagasy,
    Tatar,
    Lingala,
    Hausa,
    Bashkir,
    Javanese,
    Sundanese,
}

impl Language {
    pub fn as_str(&self) -> &str {
        match self {
            Language::English => "en",
            Language::Chinese => "zh",
            Language::German => "de",
            Language::Spanish => "es",
            Language::Russian => "ru",
            Language::Korean => "ko",
            Language::French => "fr",
            Language::Japanese => "ja",
            Language::Portuguese => "pt",
            Language::Turkish => "tr",
            Language::Polish => "pl",
            Language::Catalan => "ca",
            Language::Dutch => "nl",
            Language::Arabic => "ar",
            Language::Swedish => "sv",
            Language::Italian => "it",
            Language::Indonesian => "id",
            Language::Hindi => "hi",
            Language::Finnish => "fi",
            Language::Vietnamese => "vi",
            Language::Hebrew => "he",
            Language::Ukrainian => "uk",
            Language::Greek => "el",
            Language::Malay => "ms",
            Language::Czech => "cs",
            Language::Romanian => "ro",
            Language::Danish => "da",
            Language::Hungarian => "hu",
            Language::Tamil => "ta",
            Language::Norwegian => "no",
            Language::Thai => "th",
            Language::Urdu => "ur",
            Language::Croatian => "hr",
            Language::Bulgarian => "bg",
            Language::Lithuanian => "lt",
            Language::Latin => "la",
            Language::Maori => "mi",
            Language::Malayalam => "ml",
            Language::Welsh => "cy",
            Language::Slovak => "sk",
            Language::Telugu => "te",
            Language::Persian => "fa",
            Language::Latvian => "lv",
            Language::Bengali => "bn",
            Language::Serbian => "sr",
            Language::Azerbaijani => "az",
            Language::Slovenian => "sl",
            Language::Kannada => "kn",
            Language::Estonian => "et",
            Language::Macedonian => "mk",
            Language::Breton => "br",
            Language::Basque => "eu",
            Language::Icelandic => "is",
            Language::Armenian => "hy",
            Language::Nepali => "ne",
            Language::Mongolian => "mn",
            Language::Bosnian => "bs",
            Language::Kazakh => "kk",
            Language::Albanian => "sq",
            Language::Swahili => "sw",
            Language::Galician => "gl",
            Language::Marathi => "mr",
            Language::Punjabi => "pa",
            Language::Sinhala => "si",
            Language::Khmer => "km",
            Language::Shona => "sn",
            Language::Yoruba => "yo",
            Language::Somali => "so",
            Language::Afrikaans => "af",
            Language::Occitan => "oc",
            Language::Georgian => "ka",
            Language::Belarusian => "be",
            Language::Tajik => "tg",
            Language::Sindhi => "sd",
            Language::Gujarati => "gu",
            Language::Amharic => "am",
            Language::Yiddish => "yi",
            Language::Lao => "lo",
            Language::Uzbek => "uz",
            Language::Faroese => "fo",
            Language::HaitianCreole => "ht",
            Language::Pashto => "ps",
            Language::Turkmen => "tk",
            Language::Nynorsk => "nn",
            Language::Maltese => "mt",
            Language::Samoan => "sm",
            Language::Luxembourgish => "lb",
            Language::Burmese => "my",
            Language::Bodo => "brx",
            Language::Tagalog => "tl",
            Language::Malagasy => "mg",
            Language::Tatar => "tt",
            Language::Lingala => "ln",
            Language::Hausa => "ha",
            Language::Bashkir => "ba",
            Language::Javanese => "jw",
            Language::Sundanese => "su",
        }
    }
}

impl std::str::FromStr for Language {
    type Err = ();

    fn from_str(s: &str) -> result::Result<Self, Self::Err> {
        match s {
            "en" => Ok(Language::English),
            "zh" => Ok(Language::Chinese),
            "de" => Ok(Language::German),
            "es" => Ok(Language::Spanish),
            "ru" => Ok(Language::Russian),
            "ko" => Ok(Language::Korean),
            "fr" => Ok(Language::French),
            "ja" => Ok(Language::Japanese),
            "pt" => Ok(Language::Portuguese),
            "tr" => Ok(Language::Turkish),
            "pl" => Ok(Language::Polish),
            "ca" => Ok(Language::Catalan),
            "nl" => Ok(Language::Dutch),
            "ar" => Ok(Language::Arabic),
            "sv" => Ok(Language::Swedish),
            "it" => Ok(Language::Italian),
            "id" => Ok(Language::Indonesian),
            "hi" => Ok(Language::Hindi),
            "fi" => Ok(Language::Finnish),
            "vi" => Ok(Language::Vietnamese),
            "he" => Ok(Language::Hebrew),
            "uk" => Ok(Language::Ukrainian),
            "el" => Ok(Language::Greek),
            "ms" => Ok(Language::Malay),
            "cs" => Ok(Language::Czech),
            "ro" => Ok(Language::Romanian),
            "da" => Ok(Language::Danish),
            "hu" => Ok(Language::Hungarian),
            "ta" => Ok(Language::Tamil),
            "no" => Ok(Language::Norwegian),
            "th" => Ok(Language::Thai),
            "ur" => Ok(Language::Urdu),
            "hr" => Ok(Language::Croatian),
            "bg" => Ok(Language::Bulgarian),
            "lt" => Ok(Language::Lithuanian),
            "la" => Ok(Language::Latin),
            "mi" => Ok(Language::Maori),
            "ml" => Ok(Language::Malayalam),
            "cy" => Ok(Language::Welsh),
            "sk" => Ok(Language::Slovak),
            "te" => Ok(Language::Telugu),
            "fa" => Ok(Language::Persian),
            "lv" => Ok(Language::Latvian),
            "bn" => Ok(Language::Bengali),
            "sr" => Ok(Language::Serbian),
            "az" => Ok(Language::Azerbaijani),
            "sl" => Ok(Language::Slovenian),
            "kn" => Ok(Language::Kannada),
            "et" => Ok(Language::Estonian),
            "mk" => Ok(Language::Macedonian),
            "br" => Ok(Language::Breton),
            "eu" => Ok(Language::Basque),
            "is" => Ok(Language::Icelandic),
            "hy" => Ok(Language::Armenian),
            "ne" => Ok(Language::Nepali),
            "mn" => Ok(Language::Mongolian),
            "bs" => Ok(Language::Bosnian),
            "kk" => Ok(Language::Kazakh),
            "sq" => Ok(Language::Albanian),
            "sw" => Ok(Language::Swahili),
            "gl" => Ok(Language::Galician),
            "mr" => Ok(Language::Marathi),
            "pa" => Ok(Language::Punjabi),
            "si" => Ok(Language::Sinhala),
            "km" => Ok(Language::Khmer),
            "sn" => Ok(Language::Shona),
            "yo" => Ok(Language::Yoruba),
            "so" => Ok(Language::Somali),
            "af" => Ok(Language::Afrikaans),
            "oc" => Ok(Language::Occitan),
            "ka" => Ok(Language::Georgian),
            "be" => Ok(Language::Belarusian),
            "tg" => Ok(Language::Tajik),
            "sd" => Ok(Language::Sindhi),
            "gu" => Ok(Language::Gujarati),
            "am" => Ok(Language::Amharic),
            "yi" => Ok(Language::Yiddish),
            "lo" => Ok(Language::Lao),
            "uz" => Ok(Language::Uzbek),
            "fo" => Ok(Language::Faroese),
            "ht" => Ok(Language::HaitianCreole),
            "ps" => Ok(Language::Pashto),
            "tk" => Ok(Language::Turkmen),
            "nn" => Ok(Language::Nynorsk),
            "mt" => Ok(Language::Maltese),
            "sm" => Ok(Language::Samoan),
            "lb" => Ok(Language::Luxembourgish),
            "my" => Ok(Language::Burmese),
            "brx" => Ok(Language::Bodo),
            "tl" => Ok(Language::Tagalog),
            "mg" => Ok(Language::Malagasy),
            "tt" => Ok(Language::Tatar),
            "ln" => Ok(Language::Lingala),
            "ha" => Ok(Language::Hausa),
            "ba" => Ok(Language::Bashkir),
            "jw" => Ok(Language::Javanese),
            "su" => Ok(Language::Sundanese),
            _ => Err(()),
        }
    }
}

pub enum SpecialToken {
    EndofText,
    StartofTranscript,
    Translate,
    Transcribe,
    StartofLM,
    StartofPrev,
    NoSpeech,
    NoTimeStamps,
    Language(Language),
    Timestamp(f64),
}

impl std::fmt::Display for SpecialToken {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SpecialToken::EndofText => write!(f, "<|endoftext|>"),
            SpecialToken::StartofTranscript => write!(f, "<|startoftranscript|>"),
            SpecialToken::Translate => write!(f, "<|translate|>"),
            SpecialToken::Transcribe => write!(f, "<|transcribe|>"),
            SpecialToken::StartofLM => write!(f, "<|startoflm|>"),
            SpecialToken::StartofPrev => write!(f, "<|startofprev|>"),
            SpecialToken::NoSpeech => write!(f, "<|nospeech|>"),
            SpecialToken::NoTimeStamps => write!(f, "<|notimestamps|>"),
            SpecialToken::Language(lang) => write!(f, "<|{}|>", lang.as_str()),
            SpecialToken::Timestamp(val) => write!(f, "<|{val:.2}|>"),
        }
    }
}
